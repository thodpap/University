
Avr3Ask2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000924  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  00000998  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000acb  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000786  00000000  00000000  0000154f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000691  00000000  00000000  00001cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00002368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000421  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042b  00000000  00000000  0000290d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002d38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ae 36       	cpi	r26, 0x6E	; 110
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 50 02 	call	0x4a0	; 0x4a0 <main>
  74:	0c 94 90 04 	jmp	0x920	; 0x920 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <swap>:
	return PINC & 0x0F;		// WE READ THE 4 LSB, '1' INDICATES SWITCH PUSHED
}

/* FUNCTION TO SWAP LO WITH HO BITS */
unsigned char swap(unsigned char x) {
	return ((x & 0x0F) << 4 | (x & 0xF0) >> 4);
  7c:	90 e1       	ldi	r25, 0x10	; 16
  7e:	89 9f       	mul	r24, r25
  80:	90 01       	movw	r18, r0
  82:	11 24       	eor	r1, r1
  84:	82 95       	swap	r24
  86:	8f 70       	andi	r24, 0x0F	; 15
}
  88:	82 2b       	or	r24, r18
  8a:	08 95       	ret

0000008c <keypad_to_ascii>:
/* CONVERT VALUE TO ASCII CODE *CHECK COMMENT ABOVE SCAN_KEYPAD FOR CORRESPONDENCE
* key_reg[0] = third_row(4 MSB)-fourth_row(4 LSB)
* key_reg[1] = first_row(4 MSB)-second_row(4 LSB)
* LSB -> MSB == LEFT -> RIGHT IN KEYPAD */
unsigned char keypad_to_ascii() {
	if (key_reg[0] & 0x01)
  8c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <key_reg>
  90:	80 fd       	sbrc	r24, 0
  92:	24 c0       	rjmp	.+72     	; 0xdc <keypad_to_ascii+0x50>
		return '*';
	
	if (key_reg[0] & 0x02)
  94:	81 fd       	sbrc	r24, 1
  96:	24 c0       	rjmp	.+72     	; 0xe0 <keypad_to_ascii+0x54>
		return '0';
	
	if (key_reg[0] & 0x04)
  98:	82 fd       	sbrc	r24, 2
  9a:	24 c0       	rjmp	.+72     	; 0xe4 <keypad_to_ascii+0x58>
		return '#';
	
	if (key_reg[0] & 0x08)
  9c:	83 fd       	sbrc	r24, 3
  9e:	24 c0       	rjmp	.+72     	; 0xe8 <keypad_to_ascii+0x5c>
		return 'D';
	
	if (key_reg[0] & 0x10)
  a0:	84 fd       	sbrc	r24, 4
  a2:	24 c0       	rjmp	.+72     	; 0xec <keypad_to_ascii+0x60>
		return '7';
	
	if (key_reg[0] & 0x20)
  a4:	85 fd       	sbrc	r24, 5
  a6:	24 c0       	rjmp	.+72     	; 0xf0 <keypad_to_ascii+0x64>
		return '8';
	
	if (key_reg[0] & 0x40)
  a8:	86 fd       	sbrc	r24, 6
  aa:	24 c0       	rjmp	.+72     	; 0xf4 <keypad_to_ascii+0x68>
		return '9';
	
	if (key_reg[0] & 0x80)
  ac:	88 23       	and	r24, r24
  ae:	24 f1       	brlt	.+72     	; 0xf8 <keypad_to_ascii+0x6c>
		return 'C';
	
	if (key_reg[1] & 0x01)
  b0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <key_reg+0x1>
  b4:	90 fd       	sbrc	r25, 0
  b6:	22 c0       	rjmp	.+68     	; 0xfc <keypad_to_ascii+0x70>
		return '4';
	
	if (key_reg[1] & 0x02)
  b8:	91 fd       	sbrc	r25, 1
  ba:	22 c0       	rjmp	.+68     	; 0x100 <keypad_to_ascii+0x74>
		return '5';
	
	if (key_reg[1] & 0x04)
  bc:	92 fd       	sbrc	r25, 2
  be:	22 c0       	rjmp	.+68     	; 0x104 <keypad_to_ascii+0x78>
		return '6';
	
	if (key_reg[1] & 0x08)
  c0:	93 fd       	sbrc	r25, 3
  c2:	22 c0       	rjmp	.+68     	; 0x108 <keypad_to_ascii+0x7c>
		return 'B';
	
	if (key_reg[1] & 0x10)
  c4:	94 fd       	sbrc	r25, 4
  c6:	22 c0       	rjmp	.+68     	; 0x10c <keypad_to_ascii+0x80>
		return '1';
	
	if (key_reg[1] & 0x20)
  c8:	95 fd       	sbrc	r25, 5
  ca:	22 c0       	rjmp	.+68     	; 0x110 <keypad_to_ascii+0x84>
		return '2';
		
	if (key_reg[1] & 0x40)
  cc:	89 2f       	mov	r24, r25
  ce:	80 74       	andi	r24, 0x40	; 64
  d0:	96 fd       	sbrc	r25, 6
  d2:	20 c0       	rjmp	.+64     	; 0x114 <keypad_to_ascii+0x88>
		return '3';
	
	if (key_reg[1] & 0x80)
  d4:	99 23       	and	r25, r25
  d6:	fc f4       	brge	.+62     	; 0x116 <keypad_to_ascii+0x8a>
		return 'A';
  d8:	81 e4       	ldi	r24, 0x41	; 65
  da:	08 95       	ret
* key_reg[0] = third_row(4 MSB)-fourth_row(4 LSB)
* key_reg[1] = first_row(4 MSB)-second_row(4 LSB)
* LSB -> MSB == LEFT -> RIGHT IN KEYPAD */
unsigned char keypad_to_ascii() {
	if (key_reg[0] & 0x01)
		return '*';
  dc:	8a e2       	ldi	r24, 0x2A	; 42
  de:	08 95       	ret
	
	if (key_reg[0] & 0x02)
		return '0';
  e0:	80 e3       	ldi	r24, 0x30	; 48
  e2:	08 95       	ret
	
	if (key_reg[0] & 0x04)
		return '#';
  e4:	83 e2       	ldi	r24, 0x23	; 35
  e6:	08 95       	ret
	
	if (key_reg[0] & 0x08)
		return 'D';
  e8:	84 e4       	ldi	r24, 0x44	; 68
  ea:	08 95       	ret
	
	if (key_reg[0] & 0x10)
		return '7';
  ec:	87 e3       	ldi	r24, 0x37	; 55
  ee:	08 95       	ret
	
	if (key_reg[0] & 0x20)
		return '8';
  f0:	88 e3       	ldi	r24, 0x38	; 56
  f2:	08 95       	ret
	
	if (key_reg[0] & 0x40)
		return '9';
  f4:	89 e3       	ldi	r24, 0x39	; 57
  f6:	08 95       	ret
	
	if (key_reg[0] & 0x80)
		return 'C';
  f8:	83 e4       	ldi	r24, 0x43	; 67
  fa:	08 95       	ret
	
	if (key_reg[1] & 0x01)
		return '4';
  fc:	84 e3       	ldi	r24, 0x34	; 52
  fe:	08 95       	ret
	
	if (key_reg[1] & 0x02)
		return '5';
 100:	85 e3       	ldi	r24, 0x35	; 53
 102:	08 95       	ret
	
	if (key_reg[1] & 0x04)
		return '6';
 104:	86 e3       	ldi	r24, 0x36	; 54
 106:	08 95       	ret
	
	if (key_reg[1] & 0x08)
		return 'B';
 108:	82 e4       	ldi	r24, 0x42	; 66
 10a:	08 95       	ret
	
	if (key_reg[1] & 0x10)
		return '1';
 10c:	81 e3       	ldi	r24, 0x31	; 49
 10e:	08 95       	ret
	
	if (key_reg[1] & 0x20)
		return '2';
 110:	82 e3       	ldi	r24, 0x32	; 50
 112:	08 95       	ret
		
	if (key_reg[1] & 0x40)
		return '3';
 114:	83 e3       	ldi	r24, 0x33	; 51
	if (key_reg[1] & 0x80)
		return 'A';
	
	// Nothing Found
	return 0;
}
 116:	08 95       	ret

00000118 <calculate_LED>:


unsigned char calculate_LED(void){
	if (Cx < 30) 
 118:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Cx>
 11c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <Cx+0x1>
 120:	8e 31       	cpi	r24, 0x1E	; 30
 122:	91 05       	cpc	r25, r1
 124:	8c f0       	brlt	.+34     	; 0x148 <calculate_LED+0x30>
		return 0x01; // if   0 <= CO < 30 ppm LEDS_PORTB -> 	X0000001
	else if (Cx < 50) 
 126:	82 33       	cpi	r24, 0x32	; 50
 128:	91 05       	cpc	r25, r1
 12a:	84 f0       	brlt	.+32     	; 0x14c <calculate_LED+0x34>
		return 0x03; // if  30 <=  CO < 50 ppm LEDS_PORTB -> 	X0000011
	else if (Cx < 70) 
 12c:	86 34       	cpi	r24, 0x46	; 70
 12e:	91 05       	cpc	r25, r1
 130:	7c f0       	brlt	.+30     	; 0x150 <calculate_LED+0x38>
		return 0x07; // if  50 <=  CO < 70 ppm LEDS_PORTB -> 	X0000111
	else if (Cx < 80) 
 132:	80 35       	cpi	r24, 0x50	; 80
 134:	91 05       	cpc	r25, r1
 136:	74 f0       	brlt	.+28     	; 0x154 <calculate_LED+0x3c>
		return 0x0F; // if  70 <=  CO < 80 ppm LEDS_PORTB -> 	X0001111
	else if (Cx < 105) 
 138:	89 36       	cpi	r24, 0x69	; 105
 13a:	91 05       	cpc	r25, r1
 13c:	6c f0       	brlt	.+26     	; 0x158 <calculate_LED+0x40>
		return 0x1F;// if  80 <=  CO < 105 ppm LEDS_PORTB -> 	X0011111
	else if (Cx < 140) 
 13e:	8c 38       	cpi	r24, 0x8C	; 140
 140:	91 05       	cpc	r25, r1
 142:	64 f4       	brge	.+24     	; 0x15c <calculate_LED+0x44>
		return 0x3F;// if 105 <=  CO < 140 ppm LEDS_PORTB -> 	X0111111
 144:	8f e3       	ldi	r24, 0x3F	; 63
 146:	08 95       	ret
}


unsigned char calculate_LED(void){
	if (Cx < 30) 
		return 0x01; // if   0 <= CO < 30 ppm LEDS_PORTB -> 	X0000001
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	08 95       	ret
	else if (Cx < 50) 
		return 0x03; // if  30 <=  CO < 50 ppm LEDS_PORTB -> 	X0000011
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	08 95       	ret
	else if (Cx < 70) 
		return 0x07; // if  50 <=  CO < 70 ppm LEDS_PORTB -> 	X0000111
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	08 95       	ret
	else if (Cx < 80) 
		return 0x0F; // if  70 <=  CO < 80 ppm LEDS_PORTB -> 	X0001111
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	08 95       	ret
	else if (Cx < 105) 
		return 0x1F;// if  80 <=  CO < 105 ppm LEDS_PORTB -> 	X0011111
 158:	8f e1       	ldi	r24, 0x1F	; 31
 15a:	08 95       	ret
	else if (Cx < 140) 
		return 0x3F;// if 105 <=  CO < 140 ppm LEDS_PORTB -> 	X0111111
	else 
		return 0x7F; 				  // if CO >= 140 ppm LEDS_PORTB -> 	X1111111
 15c:	8f e7       	ldi	r24, 0x7F	; 127
}
 15e:	08 95       	ret

00000160 <calculate_cx>:
{
	ADMUX = 0x40;
	ADCSRA = ( 1 << ADEN | 1 << ADIE | 1 << ADPS2 | 1 << ADPS1 | 1 << ADPS0 );
}

int calculate_cx () {
 160:	cf 92       	push	r12
 162:	df 92       	push	r13
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	60 97       	sbiw	r28, 0x10	; 16
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
	volatile float sensitivity = 129.0, Vgas0 = 0.1;
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	a1 e0       	ldi	r26, 0x01	; 1
 182:	b3 e4       	ldi	r27, 0x43	; 67
 184:	89 83       	std	Y+1, r24	; 0x01
 186:	9a 83       	std	Y+2, r25	; 0x02
 188:	ab 83       	std	Y+3, r26	; 0x03
 18a:	bc 83       	std	Y+4, r27	; 0x04
 18c:	8d ec       	ldi	r24, 0xCD	; 205
 18e:	9c ec       	ldi	r25, 0xCC	; 204
 190:	ac ec       	ldi	r26, 0xCC	; 204
 192:	bd e3       	ldi	r27, 0x3D	; 61
 194:	8d 83       	std	Y+5, r24	; 0x05
 196:	9e 83       	std	Y+6, r25	; 0x06
 198:	af 83       	std	Y+7, r26	; 0x07
 19a:	b8 87       	std	Y+8, r27	; 0x08
	volatile float Vin = ADC * 5.0/1024.0; // Vin  = (ADC/5)/1024
 19c:	64 b1       	in	r22, 0x04	; 4
 19e:	75 b1       	in	r23, 0x05	; 5
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 95 03 	call	0x72a	; 0x72a <__floatunsisf>
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	40 ea       	ldi	r20, 0xA0	; 160
 1ae:	50 e4       	ldi	r21, 0x40	; 64
 1b0:	0e 94 23 04 	call	0x846	; 0x846 <__mulsf3>
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	40 e8       	ldi	r20, 0x80	; 128
 1ba:	5a e3       	ldi	r21, 0x3A	; 58
 1bc:	0e 94 23 04 	call	0x846	; 0x846 <__mulsf3>
 1c0:	69 87       	std	Y+9, r22	; 0x09
 1c2:	7a 87       	std	Y+10, r23	; 0x0a
 1c4:	8b 87       	std	Y+11, r24	; 0x0b
 1c6:	9c 87       	std	Y+12, r25	; 0x0c
	volatile float M = sensitivity * 0.0001; // Cx = (1/M) * (Vin - Vgas0)
 1c8:	69 81       	ldd	r22, Y+1	; 0x01
 1ca:	7a 81       	ldd	r23, Y+2	; 0x02
 1cc:	8b 81       	ldd	r24, Y+3	; 0x03
 1ce:	9c 81       	ldd	r25, Y+4	; 0x04
 1d0:	27 e1       	ldi	r18, 0x17	; 23
 1d2:	37 eb       	ldi	r19, 0xB7	; 183
 1d4:	41 ed       	ldi	r20, 0xD1	; 209
 1d6:	58 e3       	ldi	r21, 0x38	; 56
 1d8:	0e 94 23 04 	call	0x846	; 0x846 <__mulsf3>
 1dc:	6d 87       	std	Y+13, r22	; 0x0d
 1de:	7e 87       	std	Y+14, r23	; 0x0e
 1e0:	8f 87       	std	Y+15, r24	; 0x0f
 1e2:	98 8b       	std	Y+16, r25	; 0x10
	return (1/M) * (Vin - Vgas0);
 1e4:	2d 85       	ldd	r18, Y+13	; 0x0d
 1e6:	3e 85       	ldd	r19, Y+14	; 0x0e
 1e8:	4f 85       	ldd	r20, Y+15	; 0x0f
 1ea:	58 89       	ldd	r21, Y+16	; 0x10
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	80 e8       	ldi	r24, 0x80	; 128
 1f2:	9f e3       	ldi	r25, 0x3F	; 63
 1f4:	0e 94 ed 02 	call	0x5da	; 0x5da <__divsf3>
 1f8:	6b 01       	movw	r12, r22
 1fa:	7c 01       	movw	r14, r24
 1fc:	69 85       	ldd	r22, Y+9	; 0x09
 1fe:	7a 85       	ldd	r23, Y+10	; 0x0a
 200:	8b 85       	ldd	r24, Y+11	; 0x0b
 202:	9c 85       	ldd	r25, Y+12	; 0x0c
 204:	2d 81       	ldd	r18, Y+5	; 0x05
 206:	3e 81       	ldd	r19, Y+6	; 0x06
 208:	4f 81       	ldd	r20, Y+7	; 0x07
 20a:	58 85       	ldd	r21, Y+8	; 0x08
 20c:	0e 94 80 02 	call	0x500	; 0x500 <__subsf3>
 210:	9b 01       	movw	r18, r22
 212:	ac 01       	movw	r20, r24
 214:	c7 01       	movw	r24, r14
 216:	b6 01       	movw	r22, r12
 218:	0e 94 23 04 	call	0x846	; 0x846 <__mulsf3>
 21c:	0e 94 5f 03 	call	0x6be	; 0x6be <__fixsfsi>
}
 220:	cb 01       	movw	r24, r22
 222:	60 96       	adiw	r28, 0x10	; 16
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	df 90       	pop	r13
 238:	cf 90       	pop	r12
 23a:	08 95       	ret

0000023c <SUCCESS>:
		}
    }
}

void SUCCESS() {
	success_flag = 1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <success_flag>
	flag_MSB = 1;
 242:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <flag_MSB>
	PORTB = 0x80 | leds;
 246:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <leds>
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	87 ea       	ldi	r24, 0xA7	; 167
 252:	91 e6       	ldi	r25, 0x61	; 97
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <SUCCESS+0x18>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <SUCCESS+0x22>
 25e:	00 00       	nop
	_delay_ms(4000);
	PORTB = 0x00 | leds;
 260:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <leds>
 264:	88 bb       	out	0x18, r24	; 24
	flag_MSB = 0;
 266:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <flag_MSB>
	success_flag = 0;
 26a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <success_flag>
 26e:	08 95       	ret

00000270 <BLINK_FAIL>:
}

void BLINK_FAIL() {
	for (int i = 0; i < 4; ++i) {
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	20 c0       	rjmp	.+64     	; 0x2b6 <BLINK_FAIL+0x46>
		flag_MSB = 1;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <flag_MSB>
		PORTB = 0x80 | leds; // 0xff;
 27c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <leds>
 280:	80 68       	ori	r24, 0x80	; 128
 282:	88 bb       	out	0x18, r24	; 24
 284:	4f ef       	ldi	r20, 0xFF	; 255
 286:	84 e3       	ldi	r24, 0x34	; 52
 288:	9c e0       	ldi	r25, 0x0C	; 12
 28a:	41 50       	subi	r20, 0x01	; 1
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <BLINK_FAIL+0x1a>
 292:	00 c0       	rjmp	.+0      	; 0x294 <BLINK_FAIL+0x24>
 294:	00 00       	nop
		_delay_ms(500);
		
		flag_MSB = 0;
 296:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <flag_MSB>
		PORTB = 0x00 | leds;
 29a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <leds>
 29e:	88 bb       	out	0x18, r24	; 24
 2a0:	4f ef       	ldi	r20, 0xFF	; 255
 2a2:	84 e3       	ldi	r24, 0x34	; 52
 2a4:	9c e0       	ldi	r25, 0x0C	; 12
 2a6:	41 50       	subi	r20, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <BLINK_FAIL+0x36>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <BLINK_FAIL+0x40>
 2b0:	00 00       	nop
	flag_MSB = 0;
	success_flag = 0;
}

void BLINK_FAIL() {
	for (int i = 0; i < 4; ++i) {
 2b2:	2f 5f       	subi	r18, 0xFF	; 255
 2b4:	3f 4f       	sbci	r19, 0xFF	; 255
 2b6:	24 30       	cpi	r18, 0x04	; 4
 2b8:	31 05       	cpc	r19, r1
 2ba:	ec f2       	brlt	.-70     	; 0x276 <BLINK_FAIL+0x6>
		
		flag_MSB = 0;
		PORTB = 0x00 | leds;
		_delay_ms(500);
	}
} 
 2bc:	08 95       	ret

000002be <scan_row>:
 
unsigned char scan_row(int i) {   // i = 1,2,3,4
	unsigned char a = ( 1 << 3 ); // SKIP 3 LSB
	a = (a << i);			// SELECT ROW ACCORDING TO FUNCTION INPUT i
 2be:	28 e0       	ldi	r18, 0x08	; 8
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <scan_row+0xa>
 2c4:	22 0f       	add	r18, r18
 2c6:	33 1f       	adc	r19, r19
 2c8:	8a 95       	dec	r24
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <scan_row+0x6>
	PORTC = a;				// WE SELECT ROW BY SETTING CORRESPONDING BIT TO 1
 2cc:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	87 ee       	ldi	r24, 0xE7	; 231
 2d0:	93 e0       	ldi	r25, 0x03	; 3
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <scan_row+0x14>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <scan_row+0x1a>
 2d8:	00 00       	nop
	_delay_us(500);			// DELAY FOR REMOTE USAGE
	return PINC & 0x0F;		// WE READ THE 4 LSB, '1' INDICATES SWITCH PUSHED
 2da:	83 b3       	in	r24, 0x13	; 19
}
 2dc:	8f 70       	andi	r24, 0x0F	; 15
 2de:	08 95       	ret

000002e0 <scan_keypad>:
* FIRST ROW: PC4->PC0: 1,  PC4->PC1: 2,  PC4->PC2: 3, PC4->PC3: A
* SECOND ROW: PC5->PC0: 4,  PC5->PC1: 5,  PC5->PC2: 6, PC5->PC3: B
* THIRD ROW: PC6->PC0: 7,  PC6->PC1: 8,  PC6->PC2: 9, PC6->PC3: C
* FOURTH ROW: PC7->PC0: *,  PC7->PC1: 0,  PC7->PC2: #, PC7->PC3: D
*/
void scan_keypad() {
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
	unsigned char i;
	
	// check row 1, 0b0001-ROW CORRESPONDING TO PC4
	i = scan_row(1);
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 5f 01 	call	0x2be	; 0x2be <scan_row>
	key_reg[1] = swap(i);	//key_reg[1] = first_row(4 MSB)-0000
 2ec:	0e 94 3e 00 	call	0x7c	; 0x7c <swap>
 2f0:	c8 e6       	ldi	r28, 0x68	; 104
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
 2f4:	89 83       	std	Y+1, r24	; 0x01
	
	// check row 2, 0b0010-ROW CORRESPONDING TO PC5
	i = scan_row(2);
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 5f 01 	call	0x2be	; 0x2be <scan_row>
	key_reg[1] += i;		//key_reg[1] = first_row(4 MSB)-second_row(4 LSB)
 2fe:	99 81       	ldd	r25, Y+1	; 0x01
 300:	89 0f       	add	r24, r25
 302:	89 83       	std	Y+1, r24	; 0x01
	
	// check row 3, 0b0100-ROW CORRESPONDING TO PC6
	i = scan_row(3);
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 5f 01 	call	0x2be	; 0x2be <scan_row>
	key_reg[0] = swap(i);	//key_reg[0] = third_row(4 MSB) -0000
 30c:	0e 94 3e 00 	call	0x7c	; 0x7c <swap>
 310:	88 83       	st	Y, r24
	
	// check row 4, 0b1000-ROW CORRESPONDING TO PC7
	i = scan_row(4);
 312:	84 e0       	ldi	r24, 0x04	; 4
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 5f 01 	call	0x2be	; 0x2be <scan_row>
	key_reg[0] += i;		//key_reg[0] = third_row(4 MSB)-fourth_row(4 LSB)
 31a:	98 81       	ld	r25, Y
 31c:	89 0f       	add	r24, r25
 31e:	88 83       	st	Y, r24
	PORTC = 0x00;			// added for remote usage
 320:	15 ba       	out	0x15, r1	; 21
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <scan_keypad_rising_edge>:

int scan_keypad_rising_edge() {
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
	// CHECK KEYPAD
	scan_keypad();						// RETURNS RESULTS IN key_reg
 330:	0e 94 70 01 	call	0x2e0	; 0x2e0 <scan_keypad>
	// ADD TEMPORARY VARIABLES
	unsigned char tmp_keypad[2];
	tmp_keypad[0] = key_reg[0];			//tmp_keypad HOLD ACQUIRED DATA FROM SCAN_KEYPAD()
 334:	c8 e6       	ldi	r28, 0x68	; 104
 336:	d0 e0       	ldi	r29, 0x00	; 0
 338:	08 81       	ld	r16, Y
	tmp_keypad[1] = key_reg[1];
 33a:	19 81       	ldd	r17, Y+1	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33c:	8f e0       	ldi	r24, 0x0F	; 15
 33e:	94 ea       	ldi	r25, 0xA4	; 164
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <scan_keypad_rising_edge+0x18>
 344:	00 c0       	rjmp	.+0      	; 0x346 <scan_keypad_rising_edge+0x1e>
 346:	00 00       	nop
	
	_delay_ms(0x15);					// APOFYGH SPINTHIRISMOU
	
	
	scan_keypad();
 348:	0e 94 70 01 	call	0x2e0	; 0x2e0 <scan_keypad>
	key_reg[0] &= tmp_keypad[0];		// APPORIPSE TIS TIMES POU EMFANISAN SPINTHIRISMO
 34c:	88 81       	ld	r24, Y
 34e:	90 2f       	mov	r25, r16
 350:	98 23       	and	r25, r24
	key_reg[1] &= tmp_keypad[1];
 352:	29 81       	ldd	r18, Y+1	; 0x01
 354:	21 23       	and	r18, r17
	
	tmp_keypad[0] = mem[0];				// BRING LAST STATE OF SWITCHES FROM RAM TO tmp_keypad
 356:	eb e6       	ldi	r30, 0x6B	; 107
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
	tmp_keypad[1] = mem[1];
 35c:	31 81       	ldd	r19, Z+1	; 0x01
	
	mem[0] = key_reg[0];				// STORE NEW KEYPAD STATE IN RAM FOR FUTURE CALL
 35e:	90 83       	st	Z, r25
	mem[1] = key_reg[1];
 360:	21 83       	std	Z+1, r18	; 0x01
	
	
	key_reg[0] &= ~tmp_keypad[0];		// FIND KEYPAD SWITCHES THAT HAVE JUST BEEN PRESSED
 362:	80 95       	com	r24
 364:	89 23       	and	r24, r25
 366:	88 83       	st	Y, r24
	key_reg[1] &= ~tmp_keypad[1];
 368:	93 2f       	mov	r25, r19
 36a:	90 95       	com	r25
 36c:	29 23       	and	r18, r25
 36e:	29 83       	std	Y+1, r18	; 0x01
	
	return (key_reg[0] || key_reg[1]); // 16 BIT VALUE INDICATING FRESHLY PRESSED SWITCHES - RETURNS 0 IF NO SWITCH PRESSED
 370:	81 11       	cpse	r24, r1
 372:	05 c0       	rjmp	.+10     	; 0x37e <scan_keypad_rising_edge+0x56>
 374:	22 23       	and	r18, r18
 376:	31 f0       	breq	.+12     	; 0x384 <scan_keypad_rising_edge+0x5c>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	05 c0       	rjmp	.+10     	; 0x388 <scan_keypad_rising_edge+0x60>
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <scan_keypad_rising_edge+0x60>
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	08 95       	ret

00000392 <__vector_14>:
static int Cx = 0; // CO concentration in ppm
static unsigned char leds = 0x00, flag_MSB = 0x00, blink_flag = 0, success_flag = 0;
int count = 0;


ISR(ADC_vect) { // ADC Interrupt routine
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
	Cx = calculate_cx();
 3b4:	0e 94 b0 00 	call	0x160	; 0x160 <calculate_cx>
 3b8:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Cx+0x1>
 3bc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Cx>
	leds = calculate_LED();
 3c0:	0e 94 8c 00 	call	0x118	; 0x118 <calculate_LED>
 3c4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <leds>
	
	PORTB = flag_MSB << 7; // LEDS Off
 3c8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flag_MSB>
 3cc:	87 95       	ror	r24
 3ce:	88 27       	eor	r24, r24
 3d0:	87 95       	ror	r24
 3d2:	88 bb       	out	0x18, r24	; 24
	if (Cx > 70 && blink_flag)
 3d4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Cx>
 3d8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <Cx+0x1>
 3dc:	87 34       	cpi	r24, 0x47	; 71
 3de:	91 05       	cpc	r25, r1
 3e0:	54 f0       	brlt	.+20     	; 0x3f6 <__vector_14+0x64>
 3e2:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <blink_flag>
 3e6:	22 23       	and	r18, r18
 3e8:	31 f0       	breq	.+12     	; 0x3f6 <__vector_14+0x64>
		PORTB |= leds;
 3ea:	98 b3       	in	r25, 0x18	; 24
 3ec:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <leds>
 3f0:	89 2b       	or	r24, r25
 3f2:	88 bb       	out	0x18, r24	; 24
 3f4:	08 c0       	rjmp	.+16     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
	else if (Cx <= 70){
 3f6:	87 34       	cpi	r24, 0x47	; 71
 3f8:	91 05       	cpc	r25, r1
 3fa:	2c f4       	brge	.+10     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
		PORTB |= leds;
 3fc:	98 b3       	in	r25, 0x18	; 24
 3fe:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <leds>
 402:	89 2b       	or	r24, r25
 404:	88 bb       	out	0x18, r24	; 24
	}
}
 406:	ff 91       	pop	r31
 408:	ef 91       	pop	r30
 40a:	bf 91       	pop	r27
 40c:	af 91       	pop	r26
 40e:	9f 91       	pop	r25
 410:	8f 91       	pop	r24
 412:	7f 91       	pop	r23
 414:	6f 91       	pop	r22
 416:	5f 91       	pop	r21
 418:	4f 91       	pop	r20
 41a:	3f 91       	pop	r19
 41c:	2f 91       	pop	r18
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

00000428 <__vector_8>:

ISR(TIMER1_OVF_vect) {
 428:	1f 92       	push	r1
 42a:	0f 92       	push	r0
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	0f 92       	push	r0
 430:	11 24       	eor	r1, r1
 432:	8f 93       	push	r24
 434:	9f 93       	push	r25
	ADCSRA |= (1<<ADSC);          // Start the next conversion
 436:	86 b1       	in	r24, 0x06	; 6
 438:	80 64       	ori	r24, 0x40	; 64
 43a:	86 b9       	out	0x06, r24	; 6
	TCNT1 = 64755;						//Timer set to overflow in 100 msec
 43c:	83 ef       	ldi	r24, 0xF3	; 243
 43e:	9c ef       	ldi	r25, 0xFC	; 252
 440:	9d bd       	out	0x2d, r25	; 45
 442:	8c bd       	out	0x2c, r24	; 44
	TCCR1B = (1<<CS12) | (0<<CS11) | (1<<CS10); // Start again.
 444:	85 e0       	ldi	r24, 0x05	; 5
 446:	8e bd       	out	0x2e, r24	; 46
	
	if (count == 2) // Here we change the flag for the alarm (Blink_flag) every 2 Timer Interrupts
 448:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 44c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 450:	02 97       	sbiw	r24, 0x02	; 2
 452:	89 f4       	brne	.+34     	; 0x476 <__stack+0x17>
	{
		blink_flag = !blink_flag;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <blink_flag>
 45a:	91 11       	cpse	r25, r1
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <blink_flag>
		if (success_flag == 1)
 462:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <success_flag>
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	11 f4       	brne	.+4      	; 0x46e <__stack+0xf>
		blink_flag = 1; // HUGE_flag Turns ON only when we are in SUCCESS Mode (Correct password Typed) So we by pass Blink_flag to carry leds ON.
 46a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <blink_flag>
		count = 0;
 46e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 472:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
	++count;
 476:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 47a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 484:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <ADC_init>:
		return 0x7F; 				  // if CO >= 140 ppm LEDS_PORTB -> 	X1111111
}

void ADC_init(void) // Initialize ADC
{
	ADMUX = 0x40;
 496:	80 e4       	ldi	r24, 0x40	; 64
 498:	87 b9       	out	0x07, r24	; 7
	ADCSRA = ( 1 << ADEN | 1 << ADIE | 1 << ADPS2 | 1 << ADPS1 | 1 << ADPS0 );
 49a:	8f e8       	ldi	r24, 0x8F	; 143
 49c:	86 b9       	out	0x06, r24	; 6
 49e:	08 95       	ret

000004a0 <main>:
}


int main(void)
{
    DDRB = 0xFF;        // PORTB => OUTPUT
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	87 bb       	out	0x17, r24	; 23
    DDRC = 0xF0;        // KEYPAD: PORTC[7:4] => OUTPUT, PORTC[3:0] => INPUT
 4a4:	80 ef       	ldi	r24, 0xF0	; 240
 4a6:	84 bb       	out	0x14, r24	; 20
    
	ADC_init();
 4a8:	0e 94 4b 02 	call	0x496	; 0x496 <ADC_init>
	
	TIMSK = (1 << TOIE1); //Timer1 ,interrupt enable
 4ac:	84 e0       	ldi	r24, 0x04	; 4
 4ae:	89 bf       	out	0x39, r24	; 57
	TCCR1B = (1<<CS12) | (0<<CS11) | (1<<CS10);	//frequency of Timer1 8MHz/1024
 4b0:	85 e0       	ldi	r24, 0x05	; 5
 4b2:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 64755;		//Timer set to overflow in 100 msec
 4b4:	83 ef       	ldi	r24, 0xF3	; 243
 4b6:	9c ef       	ldi	r25, 0xFC	; 252
 4b8:	9d bd       	out	0x2d, r25	; 45
 4ba:	8c bd       	out	0x2c, r24	; 44

	asm("sei");				// enable interupts
 4bc:	78 94       	sei
	
    while (1) { 	    
	    mem[0] = 0;    // INITIALIZE RAM
 4be:	eb e6       	ldi	r30, 0x6B	; 107
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	10 82       	st	Z, r1
	    mem[1] = 0;
 4c4:	11 82       	std	Z+1, r1	; 0x01
	    PORTB = 0; 
 4c6:	18 ba       	out	0x18, r1	; 24
	    
	    while (!scan_keypad_rising_edge()) {}
 4c8:	0e 94 94 01 	call	0x328	; 0x328 <scan_keypad_rising_edge>
 4cc:	89 2b       	or	r24, r25
 4ce:	e1 f3       	breq	.-8      	; 0x4c8 <main+0x28>
		first = keypad_to_ascii();  
 4d0:	0e 94 46 00 	call	0x8c	; 0x8c <keypad_to_ascii>
 4d4:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <first>
		
	    // GET SECOND DIGIT
		while(!scan_keypad_rising_edge()){}
 4d8:	0e 94 94 01 	call	0x328	; 0x328 <scan_keypad_rising_edge>
 4dc:	89 2b       	or	r24, r25
 4de:	e1 f3       	breq	.-8      	; 0x4d8 <main+0x38>
		second = keypad_to_ascii();
 4e0:	0e 94 46 00 	call	0x8c	; 0x8c <keypad_to_ascii>
 4e4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <second>
		
		if (first == '2' && second == '1') {
 4e8:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <first>
 4ec:	92 33       	cpi	r25, 0x32	; 50
 4ee:	29 f4       	brne	.+10     	; 0x4fa <main+0x5a>
 4f0:	81 33       	cpi	r24, 0x31	; 49
 4f2:	19 f4       	brne	.+6      	; 0x4fa <main+0x5a>
			SUCCESS();
 4f4:	0e 94 1e 01 	call	0x23c	; 0x23c <SUCCESS>
 4f8:	e2 cf       	rjmp	.-60     	; 0x4be <main+0x1e>
		} else {
			BLINK_FAIL();
 4fa:	0e 94 38 01 	call	0x270	; 0x270 <BLINK_FAIL>
 4fe:	df cf       	rjmp	.-66     	; 0x4be <main+0x1e>

00000500 <__subsf3>:
 500:	50 58       	subi	r21, 0x80	; 128

00000502 <__addsf3>:
 502:	bb 27       	eor	r27, r27
 504:	aa 27       	eor	r26, r26
 506:	0e 94 98 02 	call	0x530	; 0x530 <__addsf3x>
 50a:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_round>
 50e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__fp_pscA>
 512:	38 f0       	brcs	.+14     	; 0x522 <__addsf3+0x20>
 514:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fp_pscB>
 518:	20 f0       	brcs	.+8      	; 0x522 <__addsf3+0x20>
 51a:	39 f4       	brne	.+14     	; 0x52a <__addsf3+0x28>
 51c:	9f 3f       	cpi	r25, 0xFF	; 255
 51e:	19 f4       	brne	.+6      	; 0x526 <__addsf3+0x24>
 520:	26 f4       	brtc	.+8      	; 0x52a <__addsf3+0x28>
 522:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__fp_nan>
 526:	0e f4       	brtc	.+2      	; 0x52a <__addsf3+0x28>
 528:	e0 95       	com	r30
 52a:	e7 fb       	bst	r30, 7
 52c:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__fp_inf>

00000530 <__addsf3x>:
 530:	e9 2f       	mov	r30, r25
 532:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_split3>
 536:	58 f3       	brcs	.-42     	; 0x50e <__addsf3+0xc>
 538:	ba 17       	cp	r27, r26
 53a:	62 07       	cpc	r22, r18
 53c:	73 07       	cpc	r23, r19
 53e:	84 07       	cpc	r24, r20
 540:	95 07       	cpc	r25, r21
 542:	20 f0       	brcs	.+8      	; 0x54c <__addsf3x+0x1c>
 544:	79 f4       	brne	.+30     	; 0x564 <__addsf3x+0x34>
 546:	a6 f5       	brtc	.+104    	; 0x5b0 <__addsf3x+0x80>
 548:	0c 94 1c 04 	jmp	0x838	; 0x838 <__fp_zero>
 54c:	0e f4       	brtc	.+2      	; 0x550 <__addsf3x+0x20>
 54e:	e0 95       	com	r30
 550:	0b 2e       	mov	r0, r27
 552:	ba 2f       	mov	r27, r26
 554:	a0 2d       	mov	r26, r0
 556:	0b 01       	movw	r0, r22
 558:	b9 01       	movw	r22, r18
 55a:	90 01       	movw	r18, r0
 55c:	0c 01       	movw	r0, r24
 55e:	ca 01       	movw	r24, r20
 560:	a0 01       	movw	r20, r0
 562:	11 24       	eor	r1, r1
 564:	ff 27       	eor	r31, r31
 566:	59 1b       	sub	r21, r25
 568:	99 f0       	breq	.+38     	; 0x590 <__addsf3x+0x60>
 56a:	59 3f       	cpi	r21, 0xF9	; 249
 56c:	50 f4       	brcc	.+20     	; 0x582 <__addsf3x+0x52>
 56e:	50 3e       	cpi	r21, 0xE0	; 224
 570:	68 f1       	brcs	.+90     	; 0x5cc <__addsf3x+0x9c>
 572:	1a 16       	cp	r1, r26
 574:	f0 40       	sbci	r31, 0x00	; 0
 576:	a2 2f       	mov	r26, r18
 578:	23 2f       	mov	r18, r19
 57a:	34 2f       	mov	r19, r20
 57c:	44 27       	eor	r20, r20
 57e:	58 5f       	subi	r21, 0xF8	; 248
 580:	f3 cf       	rjmp	.-26     	; 0x568 <__addsf3x+0x38>
 582:	46 95       	lsr	r20
 584:	37 95       	ror	r19
 586:	27 95       	ror	r18
 588:	a7 95       	ror	r26
 58a:	f0 40       	sbci	r31, 0x00	; 0
 58c:	53 95       	inc	r21
 58e:	c9 f7       	brne	.-14     	; 0x582 <__addsf3x+0x52>
 590:	7e f4       	brtc	.+30     	; 0x5b0 <__addsf3x+0x80>
 592:	1f 16       	cp	r1, r31
 594:	ba 0b       	sbc	r27, r26
 596:	62 0b       	sbc	r22, r18
 598:	73 0b       	sbc	r23, r19
 59a:	84 0b       	sbc	r24, r20
 59c:	ba f0       	brmi	.+46     	; 0x5cc <__addsf3x+0x9c>
 59e:	91 50       	subi	r25, 0x01	; 1
 5a0:	a1 f0       	breq	.+40     	; 0x5ca <__addsf3x+0x9a>
 5a2:	ff 0f       	add	r31, r31
 5a4:	bb 1f       	adc	r27, r27
 5a6:	66 1f       	adc	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	88 1f       	adc	r24, r24
 5ac:	c2 f7       	brpl	.-16     	; 0x59e <__addsf3x+0x6e>
 5ae:	0e c0       	rjmp	.+28     	; 0x5cc <__addsf3x+0x9c>
 5b0:	ba 0f       	add	r27, r26
 5b2:	62 1f       	adc	r22, r18
 5b4:	73 1f       	adc	r23, r19
 5b6:	84 1f       	adc	r24, r20
 5b8:	48 f4       	brcc	.+18     	; 0x5cc <__addsf3x+0x9c>
 5ba:	87 95       	ror	r24
 5bc:	77 95       	ror	r23
 5be:	67 95       	ror	r22
 5c0:	b7 95       	ror	r27
 5c2:	f7 95       	ror	r31
 5c4:	9e 3f       	cpi	r25, 0xFE	; 254
 5c6:	08 f0       	brcs	.+2      	; 0x5ca <__addsf3x+0x9a>
 5c8:	b0 cf       	rjmp	.-160    	; 0x52a <__addsf3+0x28>
 5ca:	93 95       	inc	r25
 5cc:	88 0f       	add	r24, r24
 5ce:	08 f0       	brcs	.+2      	; 0x5d2 <__addsf3x+0xa2>
 5d0:	99 27       	eor	r25, r25
 5d2:	ee 0f       	add	r30, r30
 5d4:	97 95       	ror	r25
 5d6:	87 95       	ror	r24
 5d8:	08 95       	ret

000005da <__divsf3>:
 5da:	0e 94 01 03 	call	0x602	; 0x602 <__divsf3x>
 5de:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_round>
 5e2:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fp_pscB>
 5e6:	58 f0       	brcs	.+22     	; 0x5fe <__divsf3+0x24>
 5e8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__fp_pscA>
 5ec:	40 f0       	brcs	.+16     	; 0x5fe <__divsf3+0x24>
 5ee:	29 f4       	brne	.+10     	; 0x5fa <__divsf3+0x20>
 5f0:	5f 3f       	cpi	r21, 0xFF	; 255
 5f2:	29 f0       	breq	.+10     	; 0x5fe <__divsf3+0x24>
 5f4:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__fp_inf>
 5f8:	51 11       	cpse	r21, r1
 5fa:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_szero>
 5fe:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__fp_nan>

00000602 <__divsf3x>:
 602:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_split3>
 606:	68 f3       	brcs	.-38     	; 0x5e2 <__divsf3+0x8>

00000608 <__divsf3_pse>:
 608:	99 23       	and	r25, r25
 60a:	b1 f3       	breq	.-20     	; 0x5f8 <__divsf3+0x1e>
 60c:	55 23       	and	r21, r21
 60e:	91 f3       	breq	.-28     	; 0x5f4 <__divsf3+0x1a>
 610:	95 1b       	sub	r25, r21
 612:	55 0b       	sbc	r21, r21
 614:	bb 27       	eor	r27, r27
 616:	aa 27       	eor	r26, r26
 618:	62 17       	cp	r22, r18
 61a:	73 07       	cpc	r23, r19
 61c:	84 07       	cpc	r24, r20
 61e:	38 f0       	brcs	.+14     	; 0x62e <__divsf3_pse+0x26>
 620:	9f 5f       	subi	r25, 0xFF	; 255
 622:	5f 4f       	sbci	r21, 0xFF	; 255
 624:	22 0f       	add	r18, r18
 626:	33 1f       	adc	r19, r19
 628:	44 1f       	adc	r20, r20
 62a:	aa 1f       	adc	r26, r26
 62c:	a9 f3       	breq	.-22     	; 0x618 <__divsf3_pse+0x10>
 62e:	35 d0       	rcall	.+106    	; 0x69a <__divsf3_pse+0x92>
 630:	0e 2e       	mov	r0, r30
 632:	3a f0       	brmi	.+14     	; 0x642 <__divsf3_pse+0x3a>
 634:	e0 e8       	ldi	r30, 0x80	; 128
 636:	32 d0       	rcall	.+100    	; 0x69c <__divsf3_pse+0x94>
 638:	91 50       	subi	r25, 0x01	; 1
 63a:	50 40       	sbci	r21, 0x00	; 0
 63c:	e6 95       	lsr	r30
 63e:	00 1c       	adc	r0, r0
 640:	ca f7       	brpl	.-14     	; 0x634 <__divsf3_pse+0x2c>
 642:	2b d0       	rcall	.+86     	; 0x69a <__divsf3_pse+0x92>
 644:	fe 2f       	mov	r31, r30
 646:	29 d0       	rcall	.+82     	; 0x69a <__divsf3_pse+0x92>
 648:	66 0f       	add	r22, r22
 64a:	77 1f       	adc	r23, r23
 64c:	88 1f       	adc	r24, r24
 64e:	bb 1f       	adc	r27, r27
 650:	26 17       	cp	r18, r22
 652:	37 07       	cpc	r19, r23
 654:	48 07       	cpc	r20, r24
 656:	ab 07       	cpc	r26, r27
 658:	b0 e8       	ldi	r27, 0x80	; 128
 65a:	09 f0       	breq	.+2      	; 0x65e <__divsf3_pse+0x56>
 65c:	bb 0b       	sbc	r27, r27
 65e:	80 2d       	mov	r24, r0
 660:	bf 01       	movw	r22, r30
 662:	ff 27       	eor	r31, r31
 664:	93 58       	subi	r25, 0x83	; 131
 666:	5f 4f       	sbci	r21, 0xFF	; 255
 668:	3a f0       	brmi	.+14     	; 0x678 <__divsf3_pse+0x70>
 66a:	9e 3f       	cpi	r25, 0xFE	; 254
 66c:	51 05       	cpc	r21, r1
 66e:	78 f0       	brcs	.+30     	; 0x68e <__divsf3_pse+0x86>
 670:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__fp_inf>
 674:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_szero>
 678:	5f 3f       	cpi	r21, 0xFF	; 255
 67a:	e4 f3       	brlt	.-8      	; 0x674 <__divsf3_pse+0x6c>
 67c:	98 3e       	cpi	r25, 0xE8	; 232
 67e:	d4 f3       	brlt	.-12     	; 0x674 <__divsf3_pse+0x6c>
 680:	86 95       	lsr	r24
 682:	77 95       	ror	r23
 684:	67 95       	ror	r22
 686:	b7 95       	ror	r27
 688:	f7 95       	ror	r31
 68a:	9f 5f       	subi	r25, 0xFF	; 255
 68c:	c9 f7       	brne	.-14     	; 0x680 <__divsf3_pse+0x78>
 68e:	88 0f       	add	r24, r24
 690:	91 1d       	adc	r25, r1
 692:	96 95       	lsr	r25
 694:	87 95       	ror	r24
 696:	97 f9       	bld	r25, 7
 698:	08 95       	ret
 69a:	e1 e0       	ldi	r30, 0x01	; 1
 69c:	66 0f       	add	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	88 1f       	adc	r24, r24
 6a2:	bb 1f       	adc	r27, r27
 6a4:	62 17       	cp	r22, r18
 6a6:	73 07       	cpc	r23, r19
 6a8:	84 07       	cpc	r24, r20
 6aa:	ba 07       	cpc	r27, r26
 6ac:	20 f0       	brcs	.+8      	; 0x6b6 <__divsf3_pse+0xae>
 6ae:	62 1b       	sub	r22, r18
 6b0:	73 0b       	sbc	r23, r19
 6b2:	84 0b       	sbc	r24, r20
 6b4:	ba 0b       	sbc	r27, r26
 6b6:	ee 1f       	adc	r30, r30
 6b8:	88 f7       	brcc	.-30     	; 0x69c <__divsf3_pse+0x94>
 6ba:	e0 95       	com	r30
 6bc:	08 95       	ret

000006be <__fixsfsi>:
 6be:	0e 94 66 03 	call	0x6cc	; 0x6cc <__fixunssfsi>
 6c2:	68 94       	set
 6c4:	b1 11       	cpse	r27, r1
 6c6:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_szero>
 6ca:	08 95       	ret

000006cc <__fixunssfsi>:
 6cc:	0e 94 02 04 	call	0x804	; 0x804 <__fp_splitA>
 6d0:	88 f0       	brcs	.+34     	; 0x6f4 <__fixunssfsi+0x28>
 6d2:	9f 57       	subi	r25, 0x7F	; 127
 6d4:	98 f0       	brcs	.+38     	; 0x6fc <__fixunssfsi+0x30>
 6d6:	b9 2f       	mov	r27, r25
 6d8:	99 27       	eor	r25, r25
 6da:	b7 51       	subi	r27, 0x17	; 23
 6dc:	b0 f0       	brcs	.+44     	; 0x70a <__fixunssfsi+0x3e>
 6de:	e1 f0       	breq	.+56     	; 0x718 <__fixunssfsi+0x4c>
 6e0:	66 0f       	add	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	88 1f       	adc	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	1a f0       	brmi	.+6      	; 0x6f0 <__fixunssfsi+0x24>
 6ea:	ba 95       	dec	r27
 6ec:	c9 f7       	brne	.-14     	; 0x6e0 <__fixunssfsi+0x14>
 6ee:	14 c0       	rjmp	.+40     	; 0x718 <__fixunssfsi+0x4c>
 6f0:	b1 30       	cpi	r27, 0x01	; 1
 6f2:	91 f0       	breq	.+36     	; 0x718 <__fixunssfsi+0x4c>
 6f4:	0e 94 1c 04 	call	0x838	; 0x838 <__fp_zero>
 6f8:	b1 e0       	ldi	r27, 0x01	; 1
 6fa:	08 95       	ret
 6fc:	0c 94 1c 04 	jmp	0x838	; 0x838 <__fp_zero>
 700:	67 2f       	mov	r22, r23
 702:	78 2f       	mov	r23, r24
 704:	88 27       	eor	r24, r24
 706:	b8 5f       	subi	r27, 0xF8	; 248
 708:	39 f0       	breq	.+14     	; 0x718 <__fixunssfsi+0x4c>
 70a:	b9 3f       	cpi	r27, 0xF9	; 249
 70c:	cc f3       	brlt	.-14     	; 0x700 <__fixunssfsi+0x34>
 70e:	86 95       	lsr	r24
 710:	77 95       	ror	r23
 712:	67 95       	ror	r22
 714:	b3 95       	inc	r27
 716:	d9 f7       	brne	.-10     	; 0x70e <__fixunssfsi+0x42>
 718:	3e f4       	brtc	.+14     	; 0x728 <__fixunssfsi+0x5c>
 71a:	90 95       	com	r25
 71c:	80 95       	com	r24
 71e:	70 95       	com	r23
 720:	61 95       	neg	r22
 722:	7f 4f       	sbci	r23, 0xFF	; 255
 724:	8f 4f       	sbci	r24, 0xFF	; 255
 726:	9f 4f       	sbci	r25, 0xFF	; 255
 728:	08 95       	ret

0000072a <__floatunsisf>:
 72a:	e8 94       	clt
 72c:	09 c0       	rjmp	.+18     	; 0x740 <__floatsisf+0x12>

0000072e <__floatsisf>:
 72e:	97 fb       	bst	r25, 7
 730:	3e f4       	brtc	.+14     	; 0x740 <__floatsisf+0x12>
 732:	90 95       	com	r25
 734:	80 95       	com	r24
 736:	70 95       	com	r23
 738:	61 95       	neg	r22
 73a:	7f 4f       	sbci	r23, 0xFF	; 255
 73c:	8f 4f       	sbci	r24, 0xFF	; 255
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	99 23       	and	r25, r25
 742:	a9 f0       	breq	.+42     	; 0x76e <__floatsisf+0x40>
 744:	f9 2f       	mov	r31, r25
 746:	96 e9       	ldi	r25, 0x96	; 150
 748:	bb 27       	eor	r27, r27
 74a:	93 95       	inc	r25
 74c:	f6 95       	lsr	r31
 74e:	87 95       	ror	r24
 750:	77 95       	ror	r23
 752:	67 95       	ror	r22
 754:	b7 95       	ror	r27
 756:	f1 11       	cpse	r31, r1
 758:	f8 cf       	rjmp	.-16     	; 0x74a <__floatsisf+0x1c>
 75a:	fa f4       	brpl	.+62     	; 0x79a <__floatsisf+0x6c>
 75c:	bb 0f       	add	r27, r27
 75e:	11 f4       	brne	.+4      	; 0x764 <__floatsisf+0x36>
 760:	60 ff       	sbrs	r22, 0
 762:	1b c0       	rjmp	.+54     	; 0x79a <__floatsisf+0x6c>
 764:	6f 5f       	subi	r22, 0xFF	; 255
 766:	7f 4f       	sbci	r23, 0xFF	; 255
 768:	8f 4f       	sbci	r24, 0xFF	; 255
 76a:	9f 4f       	sbci	r25, 0xFF	; 255
 76c:	16 c0       	rjmp	.+44     	; 0x79a <__floatsisf+0x6c>
 76e:	88 23       	and	r24, r24
 770:	11 f0       	breq	.+4      	; 0x776 <__floatsisf+0x48>
 772:	96 e9       	ldi	r25, 0x96	; 150
 774:	11 c0       	rjmp	.+34     	; 0x798 <__floatsisf+0x6a>
 776:	77 23       	and	r23, r23
 778:	21 f0       	breq	.+8      	; 0x782 <__floatsisf+0x54>
 77a:	9e e8       	ldi	r25, 0x8E	; 142
 77c:	87 2f       	mov	r24, r23
 77e:	76 2f       	mov	r23, r22
 780:	05 c0       	rjmp	.+10     	; 0x78c <__floatsisf+0x5e>
 782:	66 23       	and	r22, r22
 784:	71 f0       	breq	.+28     	; 0x7a2 <__floatsisf+0x74>
 786:	96 e8       	ldi	r25, 0x86	; 134
 788:	86 2f       	mov	r24, r22
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	60 e0       	ldi	r22, 0x00	; 0
 78e:	2a f0       	brmi	.+10     	; 0x79a <__floatsisf+0x6c>
 790:	9a 95       	dec	r25
 792:	66 0f       	add	r22, r22
 794:	77 1f       	adc	r23, r23
 796:	88 1f       	adc	r24, r24
 798:	da f7       	brpl	.-10     	; 0x790 <__floatsisf+0x62>
 79a:	88 0f       	add	r24, r24
 79c:	96 95       	lsr	r25
 79e:	87 95       	ror	r24
 7a0:	97 f9       	bld	r25, 7
 7a2:	08 95       	ret

000007a4 <__fp_inf>:
 7a4:	97 f9       	bld	r25, 7
 7a6:	9f 67       	ori	r25, 0x7F	; 127
 7a8:	80 e8       	ldi	r24, 0x80	; 128
 7aa:	70 e0       	ldi	r23, 0x00	; 0
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	08 95       	ret

000007b0 <__fp_nan>:
 7b0:	9f ef       	ldi	r25, 0xFF	; 255
 7b2:	80 ec       	ldi	r24, 0xC0	; 192
 7b4:	08 95       	ret

000007b6 <__fp_pscA>:
 7b6:	00 24       	eor	r0, r0
 7b8:	0a 94       	dec	r0
 7ba:	16 16       	cp	r1, r22
 7bc:	17 06       	cpc	r1, r23
 7be:	18 06       	cpc	r1, r24
 7c0:	09 06       	cpc	r0, r25
 7c2:	08 95       	ret

000007c4 <__fp_pscB>:
 7c4:	00 24       	eor	r0, r0
 7c6:	0a 94       	dec	r0
 7c8:	12 16       	cp	r1, r18
 7ca:	13 06       	cpc	r1, r19
 7cc:	14 06       	cpc	r1, r20
 7ce:	05 06       	cpc	r0, r21
 7d0:	08 95       	ret

000007d2 <__fp_round>:
 7d2:	09 2e       	mov	r0, r25
 7d4:	03 94       	inc	r0
 7d6:	00 0c       	add	r0, r0
 7d8:	11 f4       	brne	.+4      	; 0x7de <__fp_round+0xc>
 7da:	88 23       	and	r24, r24
 7dc:	52 f0       	brmi	.+20     	; 0x7f2 <__fp_round+0x20>
 7de:	bb 0f       	add	r27, r27
 7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__fp_round+0x20>
 7e2:	bf 2b       	or	r27, r31
 7e4:	11 f4       	brne	.+4      	; 0x7ea <__fp_round+0x18>
 7e6:	60 ff       	sbrs	r22, 0
 7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <__fp_round+0x20>
 7ea:	6f 5f       	subi	r22, 0xFF	; 255
 7ec:	7f 4f       	sbci	r23, 0xFF	; 255
 7ee:	8f 4f       	sbci	r24, 0xFF	; 255
 7f0:	9f 4f       	sbci	r25, 0xFF	; 255
 7f2:	08 95       	ret

000007f4 <__fp_split3>:
 7f4:	57 fd       	sbrc	r21, 7
 7f6:	90 58       	subi	r25, 0x80	; 128
 7f8:	44 0f       	add	r20, r20
 7fa:	55 1f       	adc	r21, r21
 7fc:	59 f0       	breq	.+22     	; 0x814 <__fp_splitA+0x10>
 7fe:	5f 3f       	cpi	r21, 0xFF	; 255
 800:	71 f0       	breq	.+28     	; 0x81e <__fp_splitA+0x1a>
 802:	47 95       	ror	r20

00000804 <__fp_splitA>:
 804:	88 0f       	add	r24, r24
 806:	97 fb       	bst	r25, 7
 808:	99 1f       	adc	r25, r25
 80a:	61 f0       	breq	.+24     	; 0x824 <__fp_splitA+0x20>
 80c:	9f 3f       	cpi	r25, 0xFF	; 255
 80e:	79 f0       	breq	.+30     	; 0x82e <__fp_splitA+0x2a>
 810:	87 95       	ror	r24
 812:	08 95       	ret
 814:	12 16       	cp	r1, r18
 816:	13 06       	cpc	r1, r19
 818:	14 06       	cpc	r1, r20
 81a:	55 1f       	adc	r21, r21
 81c:	f2 cf       	rjmp	.-28     	; 0x802 <__fp_split3+0xe>
 81e:	46 95       	lsr	r20
 820:	f1 df       	rcall	.-30     	; 0x804 <__fp_splitA>
 822:	08 c0       	rjmp	.+16     	; 0x834 <__fp_splitA+0x30>
 824:	16 16       	cp	r1, r22
 826:	17 06       	cpc	r1, r23
 828:	18 06       	cpc	r1, r24
 82a:	99 1f       	adc	r25, r25
 82c:	f1 cf       	rjmp	.-30     	; 0x810 <__fp_splitA+0xc>
 82e:	86 95       	lsr	r24
 830:	71 05       	cpc	r23, r1
 832:	61 05       	cpc	r22, r1
 834:	08 94       	sec
 836:	08 95       	ret

00000838 <__fp_zero>:
 838:	e8 94       	clt

0000083a <__fp_szero>:
 83a:	bb 27       	eor	r27, r27
 83c:	66 27       	eor	r22, r22
 83e:	77 27       	eor	r23, r23
 840:	cb 01       	movw	r24, r22
 842:	97 f9       	bld	r25, 7
 844:	08 95       	ret

00000846 <__mulsf3>:
 846:	0e 94 36 04 	call	0x86c	; 0x86c <__mulsf3x>
 84a:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_round>
 84e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__fp_pscA>
 852:	38 f0       	brcs	.+14     	; 0x862 <__mulsf3+0x1c>
 854:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fp_pscB>
 858:	20 f0       	brcs	.+8      	; 0x862 <__mulsf3+0x1c>
 85a:	95 23       	and	r25, r21
 85c:	11 f0       	breq	.+4      	; 0x862 <__mulsf3+0x1c>
 85e:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__fp_inf>
 862:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__fp_nan>
 866:	11 24       	eor	r1, r1
 868:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_szero>

0000086c <__mulsf3x>:
 86c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_split3>
 870:	70 f3       	brcs	.-36     	; 0x84e <__mulsf3+0x8>

00000872 <__mulsf3_pse>:
 872:	95 9f       	mul	r25, r21
 874:	c1 f3       	breq	.-16     	; 0x866 <__mulsf3+0x20>
 876:	95 0f       	add	r25, r21
 878:	50 e0       	ldi	r21, 0x00	; 0
 87a:	55 1f       	adc	r21, r21
 87c:	62 9f       	mul	r22, r18
 87e:	f0 01       	movw	r30, r0
 880:	72 9f       	mul	r23, r18
 882:	bb 27       	eor	r27, r27
 884:	f0 0d       	add	r31, r0
 886:	b1 1d       	adc	r27, r1
 888:	63 9f       	mul	r22, r19
 88a:	aa 27       	eor	r26, r26
 88c:	f0 0d       	add	r31, r0
 88e:	b1 1d       	adc	r27, r1
 890:	aa 1f       	adc	r26, r26
 892:	64 9f       	mul	r22, r20
 894:	66 27       	eor	r22, r22
 896:	b0 0d       	add	r27, r0
 898:	a1 1d       	adc	r26, r1
 89a:	66 1f       	adc	r22, r22
 89c:	82 9f       	mul	r24, r18
 89e:	22 27       	eor	r18, r18
 8a0:	b0 0d       	add	r27, r0
 8a2:	a1 1d       	adc	r26, r1
 8a4:	62 1f       	adc	r22, r18
 8a6:	73 9f       	mul	r23, r19
 8a8:	b0 0d       	add	r27, r0
 8aa:	a1 1d       	adc	r26, r1
 8ac:	62 1f       	adc	r22, r18
 8ae:	83 9f       	mul	r24, r19
 8b0:	a0 0d       	add	r26, r0
 8b2:	61 1d       	adc	r22, r1
 8b4:	22 1f       	adc	r18, r18
 8b6:	74 9f       	mul	r23, r20
 8b8:	33 27       	eor	r19, r19
 8ba:	a0 0d       	add	r26, r0
 8bc:	61 1d       	adc	r22, r1
 8be:	23 1f       	adc	r18, r19
 8c0:	84 9f       	mul	r24, r20
 8c2:	60 0d       	add	r22, r0
 8c4:	21 1d       	adc	r18, r1
 8c6:	82 2f       	mov	r24, r18
 8c8:	76 2f       	mov	r23, r22
 8ca:	6a 2f       	mov	r22, r26
 8cc:	11 24       	eor	r1, r1
 8ce:	9f 57       	subi	r25, 0x7F	; 127
 8d0:	50 40       	sbci	r21, 0x00	; 0
 8d2:	9a f0       	brmi	.+38     	; 0x8fa <__mulsf3_pse+0x88>
 8d4:	f1 f0       	breq	.+60     	; 0x912 <__mulsf3_pse+0xa0>
 8d6:	88 23       	and	r24, r24
 8d8:	4a f0       	brmi	.+18     	; 0x8ec <__mulsf3_pse+0x7a>
 8da:	ee 0f       	add	r30, r30
 8dc:	ff 1f       	adc	r31, r31
 8de:	bb 1f       	adc	r27, r27
 8e0:	66 1f       	adc	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	91 50       	subi	r25, 0x01	; 1
 8e8:	50 40       	sbci	r21, 0x00	; 0
 8ea:	a9 f7       	brne	.-22     	; 0x8d6 <__mulsf3_pse+0x64>
 8ec:	9e 3f       	cpi	r25, 0xFE	; 254
 8ee:	51 05       	cpc	r21, r1
 8f0:	80 f0       	brcs	.+32     	; 0x912 <__mulsf3_pse+0xa0>
 8f2:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__fp_inf>
 8f6:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_szero>
 8fa:	5f 3f       	cpi	r21, 0xFF	; 255
 8fc:	e4 f3       	brlt	.-8      	; 0x8f6 <__mulsf3_pse+0x84>
 8fe:	98 3e       	cpi	r25, 0xE8	; 232
 900:	d4 f3       	brlt	.-12     	; 0x8f6 <__mulsf3_pse+0x84>
 902:	86 95       	lsr	r24
 904:	77 95       	ror	r23
 906:	67 95       	ror	r22
 908:	b7 95       	ror	r27
 90a:	f7 95       	ror	r31
 90c:	e7 95       	ror	r30
 90e:	9f 5f       	subi	r25, 0xFF	; 255
 910:	c1 f7       	brne	.-16     	; 0x902 <__mulsf3_pse+0x90>
 912:	fe 2b       	or	r31, r30
 914:	88 0f       	add	r24, r24
 916:	91 1d       	adc	r25, r1
 918:	96 95       	lsr	r25
 91a:	87 95       	ror	r24
 91c:	97 f9       	bld	r25, 7
 91e:	08 95       	ret

00000920 <_exit>:
 920:	f8 94       	cli

00000922 <__stop_program>:
 922:	ff cf       	rjmp	.-2      	; 0x922 <__stop_program>
