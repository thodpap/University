/*
 * A predicate that reads the input from File and returns it in
 * the last three arguments: N, K and C.
 * Example:
 *
 * ?- read_input('c1.txt', N, K, C).
 * N = 10,
 * K = 3,
 * C = [1, 3, 1, 3, 1, 3, 3, 2, 2|...].
 */
read_input(File, M, N, C) :-
    open(File, read, Stream),
    read_line(Stream, [M, N]),
    read_line(Stream, C).

read_line(Stream, L) :-
    read_line_to_codes(Stream, Line),
    atom_codes(Atom, Line),
    atomic_list_concat(Atoms, ' ', Atom),
    maplist(atom_number, Atoms, L).


/*prefix(M, N, [Head|Tail], Sum, Pos, [P1|P2]):-
    (Pos < M ->
      Sum1 is Sum + Head + N,
      Pos1 is Pos + 1,
      P1 is Sum1,
      prefix(M, N, Tail, Sum1, Pos1, P2)
    ).*/

sums(L, S, N) :- sumrunner(L, S, N, 0).
sumrunner([], [], _, _).
sumrunner([A|B], [C|D], N, TOTAL) :- C is TOTAL + A + N, sumrunner(B, D, N, C).

max_from_left([], _, _, _).
max_from_left([Head|Tail], MaxArr, Pos, Max):-
  (
    Head > Max ->
      Pos1 is Pos + 1,
      Max1 is Head,
      H1 = (Head, Pos1),
      MaxArr = [H1|T1],
      max_from_left(Tail, T1, Pos1, Max1);
    Head =< Max,
    Pos1 is Pos + 1,
    max_from_left(Tail, MaxArr, Pos1, Max)
  ).


min_from_right([], _, _, _).
min_from_right([Head|Tail], MinArr, Pos, Min):-
    (
      Head < Min ->
        Pos1 is Pos - 1,
        Min1 is Head,
        H1 = (Head, Pos1),
        MinArr = [H1|T1],
        min_from_right(Tail, T1, Pos1, Min1);
      Head >= Min,
      Pos1 is Pos - 1,
      min_from_right(Tail, MinArr, Pos1, Min)
    ).


len_tuple([], Pos1, Pos):-Pos1 is Pos.
len_tuple([_|Tail], Ans, Pos):-
  Ans1 is Pos + 1,
  len_tuple(Tail, Ans, Ans1).


solver(_, [], Ans, F):- F is Ans.
solver([], _, Ans, F):- F is Ans.
solver([(Head_max,Pos_max)|Tail_max], [(Head_min, Pos_min)|Tail_min], Ans, F):-
  (
    Head_min =< Head_max ->
      (
        Tail_min = [(H1, _)|_],
        len_tuple(Tail_min, G, 0),
        (G=\=0, H1 =< Head_max) ->
          solver([(Head_max,Pos_max)|Tail_max], Tail_min, Ans, F);
        Diff is Pos_min - Pos_max,
        Ans1 is max(Diff, Ans),
        solver(Tail_max, Tail_min, Ans1, F)
      );
    Head_min > Head_max,
    (
      Pos_max < Pos_min - 1,
      solver(Tail_max, [(Head_min, Pos_min)|Tail_min], Ans, F);
      Pos_max >= Pos_min - 1,
        solver([(Head_max,Pos_max)|Tail_max], Tail_min, Ans, F)
    )
  ).




longest(File, Ans):-
   read_input(File, M, N, C),
   sums(C,S,N),
   /*writeln(S)*/
   append([0], S, S1),
   max_from_left(S1, Max, -1, -1),
   reverse(S1, S2),
   S2 = [H1|_],
   Max_ is H1 + 1,
   M_ is M+1,
   min_from_right(S2, Min, M_, Max_),
   reverse(Min, Min1),
   solver(Max, Min1, 0, Ans),
   writeln("me").
