
ask3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000064d  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000585  00000000  00000000  00000855  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000269  00000000  00000000  00000dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d0  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a3  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001527  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 83 00 	call	0x106	; 0x106 <main>
  64:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:

#include <avr/io.h>
#include <avr/interrupt.h> 

ISR(INT0_vect)
{ 
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	7f 93       	push	r23
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	ef 93       	push	r30
  88:	ff 93       	push	r31
	// 1000 0001
	// PA2 ON ->  PORTC : 0000 0010
	// PA2 OFF -> PORTC : 0000 0011
	char A = PINA;
  8a:	f9 b3       	in	r31, 0x19	; 25
	char input = PINB;
  8c:	e6 b3       	in	r30, 0x16	; 22
			
		if 0 then count += 0
		if 1 then count += 1
	*/
	int count = 0;
	for(int i = 1, j = 0; i < (1 << 8); i *= 2, ++j) { 
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	50 e0       	ldi	r21, 0x00	; 0
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	30 e0       	ldi	r19, 0x00	; 0
										0..000...0 >> j -> 0
			
		if 0 then count += 0
		if 1 then count += 1
	*/
	int count = 0;
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	70 e0       	ldi	r23, 0x00	; 0
	for(int i = 1, j = 0; i < (1 << 8); i *= 2, ++j) { 
  9a:	10 c0       	rjmp	.+32     	; 0xbc <__vector_1+0x50>
		count += (input & i) >> j;
  9c:	8e 2f       	mov	r24, r30
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	82 23       	and	r24, r18
  a2:	93 23       	and	r25, r19
  a4:	04 2e       	mov	r0, r20
  a6:	02 c0       	rjmp	.+4      	; 0xac <__vector_1+0x40>
  a8:	95 95       	asr	r25
  aa:	87 95       	ror	r24
  ac:	0a 94       	dec	r0
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <__vector_1+0x3c>
  b0:	68 0f       	add	r22, r24
  b2:	79 1f       	adc	r23, r25
			
		if 0 then count += 0
		if 1 then count += 1
	*/
	int count = 0;
	for(int i = 1, j = 0; i < (1 << 8); i *= 2, ++j) { 
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	4f 5f       	subi	r20, 0xFF	; 255
  ba:	5f 4f       	sbci	r21, 0xFF	; 255
  bc:	2f 3f       	cpi	r18, 0xFF	; 255
  be:	31 05       	cpc	r19, r1
  c0:	69 f3       	breq	.-38     	; 0x9c <__vector_1+0x30>
  c2:	64 f3       	brlt	.-40     	; 0x9c <__vector_1+0x30>
		count += (input & i) >> j;
	} 
	if (A & 0x04) { // if PA2 is ON transform to binary
  c4:	f2 fd       	sbrc	r31, 2
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <__vector_1+0x6c>
  c8:	cb 01       	movw	r24, r22
  ca:	0d c0       	rjmp	.+26     	; 0xe6 <__vector_1+0x7a>
		int t = 0;
		for(int i = 0; i < count; ++i) {
			t *= 2; // 000000 -> 000001 -> 0000010 + 1-> 0000011 -> 0000110 + 1 0000111 
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
			t += 1;
  d0:	01 96       	adiw	r24, 0x01	; 1
	for(int i = 1, j = 0; i < (1 << 8); i *= 2, ++j) { 
		count += (input & i) >> j;
	} 
	if (A & 0x04) { // if PA2 is ON transform to binary
		int t = 0;
		for(int i = 0; i < count; ++i) {
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	04 c0       	rjmp	.+8      	; 0xe0 <__vector_1+0x74>
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	26 17       	cp	r18, r22
  e2:	37 07       	cpc	r19, r23
  e4:	9c f3       	brlt	.-26     	; 0xcc <__vector_1+0x60>
			t *= 2; // 000000 -> 000001 -> 0000010 + 1-> 0000011 -> 0000110 + 1 0000111 
			t += 1;
		}
		count = t;
	} // else if PA2 is OFF just keep the counter as it is
	PORTC = count;
  e6:	85 bb       	out	0x15, r24	; 21
}
  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	7f 91       	pop	r23
  f2:	6f 91       	pop	r22
  f4:	5f 91       	pop	r21
  f6:	4f 91       	pop	r20
  f8:	3f 91       	pop	r19
  fa:	2f 91       	pop	r18
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <main>:

int main(void)
{
	DDRA = 0x00; // A input
 106:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0x00; // B input
 108:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xff; //	C output 
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	84 bb       	out	0x14, r24	; 20
	
	GICR = 1<<INT0;		/* Enable INT0*/
 10e:	80 e4       	ldi	r24, 0x40	; 64
 110:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1<<ISC01) | (1<<ISC00);  /* Trigger INT0 on rising edge */
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	85 bf       	out	0x35, r24	; 53
	asm("sei");			/* Enable Global Interrupt */
 116:	78 94       	sei
	
    while (1) {
		asm("nop");
 118:	00 00       	nop
 11a:	fe cf       	rjmp	.-4      	; 0x118 <main+0x12>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
